<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-06-18T04:39:54+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">jeanhyok’s Tech Blog</title><subtitle>Technical Analysis</subtitle><author><name>JH</name></author><entry><title type="html">Python Socket Programming</title><link href="http://0.0.0.0:4000/network%20programming/2025/06/10/Socket-Programming-Server/" rel="alternate" type="text/html" title="Python Socket Programming" /><published>2025-06-10T00:00:00+00:00</published><updated>2025-06-10T00:00:00+00:00</updated><id>http://0.0.0.0:4000/network%20programming/2025/06/10/Socket-Programming-Server</id><content type="html" xml:base="http://0.0.0.0:4000/network%20programming/2025/06/10/Socket-Programming-Server/"><![CDATA[<h2 id="들어가기-앞서">들어가기 앞서</h2>
<p><strong>프로그래머 관점에서</strong><br />
  현대의 애플리케이션 개발에서 소켓 통신을 이해하는 것은 선택이 아닌 필수가 되었다. 채팅 앱, 온라인 게임, IoT 디바이스, 금융 서비스 등 우리가 일상적으로 접하는 대부분의 서비스가 클라이언트-서버 구조로 동작하며, 이 모든 통신의 근간에는 소켓이 자리하고 있다. 많은 웹 개발자들이 HTTP API만으로도 충분하다고 생각하지만, HTTP 역시 결국 TCP 소켓 위에서 구현된 프로토콜이다. 진정한 네트워크 프로그래밍 역량을 갖추려면 이러한 저수준 동작 원리를 이해해야 한다. 특히 실시간 스트리밍, 게임 서버, 보안이 중요한 시스템을 개발할 때는 HTTP로는 한계가 있어 TCP나 UDP 소켓을 직접 다루며 프로토콜을 설계해야 한다. 더 중요한 것은 디버깅 능력의 차이다. 서버와의 통신에 문제가 생겼을 때, 소켓을 모르면 클라이언트 코드만 뒤적거리게 된다. 하지만 소켓을 이해하고 있다면 패킷이 제대로 전송되었는지, 서버 응답이 왔는지, 어느 구간에서 막혔는지 체계적으로 추적할 수 있다.</p>

<p><strong>네트워크 엔지니어 관점에서</strong><br />
  네트워크 엔지니어에게 소켓은 애플리케이션과 네트워크 인프라를 연결하는 핵심 고리다. 모든 네트워크 트래픽은 결국 애플리케이션이 소켓을 통해 데이터를 전송한 결과물이다. 이를 이해하지 못하면 “왜 이 포트가 열려야 하는지”, “왜 특정 연결이 실패하는지”에 대한 근본적인 설명이 불가능하다. 방화벽과 보안 정책을 설정할 때도 소켓 지식은 필수다. 단순히 포트 번호만 보고 정책을 만들면 서비스가 제대로 작동하지 않거나, 반대로 보안 취약점이 생길 수 있다. 애플리케이션이 어떤 방식으로 소켓 통신을 하는지 알아야 적절한 접근 제어 정책을 수립할 수 있다. 패킷 분석 도구를 활용할 때도 소켓 지식이 빛을 발한다. Wireshark나 tcpdump로 트래픽을 분석할 때, TCP의 3-way handshake나 연결 상태 변화를 이해하고 있어야 패킷의 흐름을 정확히 해석할 수 있다. 이런 지식 없이는 화면에 나타나는 숫자들이 그저 의미 없는 데이터일 뿐이다. 무엇보다 소켓을 이해하면 문제 발생 시 애플리케이션 문제인지 네트워크 인프라 문제인지 명확히 구분할 수 있다. 이는 개발팀과 인프라팀 간의 효율적인 협업을 가능하게 하며, 문제 해결 시간을 크게 단축시킨다.
<br /><br /></p>

<hr />

<h2 id="소켓이란">소켓이란?</h2>
<p>  서로 떨어진 두 대의 컴퓨터 사이에서 TCP/IP 네트워크를 통해 상호 통신이 가능하도록 운영체제에서 해당 자원을 할당하고, 처리해 주는 방식을 의미한다. 다시 말해 컴퓨터 상호간에 데이터를 주고받기 위한 프로세스 처리 방식을 소켓이라고 한다. 소켓은 1982년 BSD 유닉스 커널에서 <strong>C 언어</strong>를 통해 구현됐고, 이에 기반해 1986년 <strong>TCP/IP 소켓 방식</strong>을 표준으로 확립했다. 오늘날 사용하는 소켓은 특별한 언급이 없는 한 C 언어로 구현한 BSD 유닉스 커널에 기반한 TCP/IP 소켓 방식을 의미한다.<br />
<br />
  소켓 통신은 <strong>클라이언트(Client) - 서버(Server) 구조</strong>를 전제로 한다. 서버와 클라이언트는 서비스를 기준으로 구분하는데, 서버는 서비스를 제공하는 컴퓨터를 의미하고, 클라이언트는 서비스를 요청하는 컴퓨터를 의미한다.
<br /><br /></p>

<hr />

<h2 id="동작-흐름-요약">동작 흐름 요약</h2>
<p>서버는 소켓을 생성한다.                      socket 함수 호출<br />
IP 주소와 Port 번호를 할당한다.       bind 함수 호출<br />
연결요청 가능 상태로 변경한다.         listen 함수 호출<br />
서버가 요청을 수락합니다.                  accept 함수 호출<br />
서로 데이터를 주고받습니다.<br />
통신이 끝나면 소켓을 종료(Close) 합니다.
<br /><br /></p>

<hr />

<h2 id="python-소켓">python 소켓</h2>
<!-- 소켓 라이브러리 불러오기 -->
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">socket</span>
</code></pre></div></div>
<p>  C에 포팅된 Python Socket Library를 불러온다.<br />
<br />
<!-- 소켓 객체 생성 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">)</span>
</code></pre></div></div>
<p>  socket 함수를 통해 객체를 생성하고, 객체 주소를 변수 sock에 저장한다.<br />
  arg1: 소켓의 Address Family를 정의한다.<br />
  arg2: 소켓의 타입을 정의한다.<br />
  arg3: 소켓의 프로토콜을 정의한다.<br />
<br />
<!-- 소켓 옵션 설정 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sock</span><span class="p">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<p>  setsockopt 함수를 통해 소켓의 옵션을 설정할 수 있다.<br />
<br />
<!-- 프로세스와 소켓 바인딩 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sock</span><span class="p">.</span><span class="n">bind</span><span class="p">((</span><span class="o">&lt;</span><span class="n">IP</span> <span class="n">addr</span><span class="o">&gt;</span><span class="p">:</span><span class="nb">str</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">port</span><span class="o">&gt;</span><span class="p">:</span><span class="nb">int</span><span class="p">):</span><span class="nb">tuple</span><span class="p">)</span>
</code></pre></div></div>
<p>  서버에서 bind 함수를 통해 자신의 IP 주소와 Port 번호를 바인딩(할당받고 해당 객체로 통신)한다.<br />
<br />
<!-- 서버에서 LISTEN 상태로 변경 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sock</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="n">arg</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>
<p>  listen 함수를 통해 서버의 상태가 LISTEN으로 변한다. 해당 소켓은 arg 횟수만큼 연결할 수 있다.<br />
<br />
<!-- 서버에서 연결 확립 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">child</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">sock</span><span class="p">.</span><span class="n">accept</span><span class="p">()</span>
</code></pre></div></div>
<p>  accept 함수를 통해 클라이언트와 3WHS(3-Way Handshaking)을 수행한다. accept 함수는 sock을 Fork해서 만들어진 소켓과 클라이언트 소켓주소를 반환한다.<br />
<br />
<!-- 서버에서 데이터 수신 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">child</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</code></pre></div></div>
<p>  recv 함수로 소켓을 통해 data를 전송받는다. arg는 받을 수 있는 최대 버퍼 크기이다.<br />
<br />
<!-- 서버에서 데이터 송신 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">child</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</code></pre></div></div>
<p>  sendall 함수로 소켓을 통해 message를 전송한다.<br />
<br />
<!-- 연결 끊기 --></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">child</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">sock</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>
<p>  소켓 객체를 OS에 반환한다</p>

<hr />

<h4 id="주의사항">주의사항</h4>
<p>※ 연결을 끊을 때 <strong>부모 객체부터 제거하면 Fork된 소켓은 고아 프로세스</strong>가 된다. 그러므로 <strong>자식 소켓부터 제거</strong>해야 한다<br />
※ 파이썬의 경우 연결을 close 함수를 사용하여 끊지 않아도 <strong>객체가 소멸되면 연결을 끊기므로 주의</strong>하여야 한다
<br /><br /></p>

<hr />]]></content><author><name>SY Kang</name></author><category term="Network Programming" /><category term="Network" /><category term="Programming" /><summary type="html"><![CDATA[들어가기 앞서 프로그래머 관점에서   현대의 애플리케이션 개발에서 소켓 통신을 이해하는 것은 선택이 아닌 필수가 되었다. 채팅 앱, 온라인 게임, IoT 디바이스, 금융 서비스 등 우리가 일상적으로 접하는 대부분의 서비스가 클라이언트-서버 구조로 동작하며, 이 모든 통신의 근간에는 소켓이 자리하고 있다. 많은 웹 개발자들이 HTTP API만으로도 충분하다고 생각하지만, HTTP 역시 결국 TCP 소켓 위에서 구현된 프로토콜이다. 진정한 네트워크 프로그래밍 역량을 갖추려면 이러한 저수준 동작 원리를 이해해야 한다. 특히 실시간 스트리밍, 게임 서버, 보안이 중요한 시스템을 개발할 때는 HTTP로는 한계가 있어 TCP나 UDP 소켓을 직접 다루며 프로토콜을 설계해야 한다. 더 중요한 것은 디버깅 능력의 차이다. 서버와의 통신에 문제가 생겼을 때, 소켓을 모르면 클라이언트 코드만 뒤적거리게 된다. 하지만 소켓을 이해하고 있다면 패킷이 제대로 전송되었는지, 서버 응답이 왔는지, 어느 구간에서 막혔는지 체계적으로 추적할 수 있다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog6.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog6.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Transport Control Protocol</title><link href="http://0.0.0.0:4000/network/2025/06/03/TCP-Header-Overview/" rel="alternate" type="text/html" title="Transport Control Protocol" /><published>2025-06-03T00:00:00+00:00</published><updated>2025-06-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/network/2025/06/03/TCP-Header-Overview</id><content type="html" xml:base="http://0.0.0.0:4000/network/2025/06/03/TCP-Header-Overview/"><![CDATA[<h2 id="tcp-overview">TCP Overview</h2>
<p>  네트워크 전송 시 외부 요인의 영향을 많이 받는 L1(물리 계층), L2(데이터링크 계층)에서 데이터 손실 및 오류가 자주 일어난다. 이러한 문제점을 해결하기 위해 제안된 것이 TCP(Transport Control Protocol)이다. TCP의 가장 중요한 기능은 어플리케이션에 신뢰성 있는 데이터를 전송하는 것이다.
<br />
  이는 시퀀스 넘버 이용한 손실 감지, 시퀀스 넘버와 Ack 넘버를 통한 손실 탐지, Checksum을 이용한 오류 탐지, 재전송 요청을 통한 오류 수정, 윈도우 사이즈 값을 이용한 흐름 제어를 통해 보장한다. 또한 통신선의 효율을 위해 너무 큰 Segment는 Segmentation 후 전송되어 수신 측에서 시퀀스 넘버를 이용하여 Reassemble(재조립)을 한다. 또한 TCP에서 정의한 포트를 통해 여러 어플리케이션에서 하나의 IP를 사용하여 서로 다른 시스템과 통신을 할 수 있게 한다. 이것이 TCP의 가장 핵심적인 기능이다.
<br /><br />
  이러한 기능은 TCP Payload 앞에 붙여지는 헤더에 의해 제어된다. 따라서 본 포스트에서는 TCP 헤더에 대해 조금 살펴보겠다.
<br /><br /></p>

<hr />

<h2 id="tcp-header-structure">TCP Header Structure</h2>
<figure style="text-align: center;">
  <img src="/assets/img/blog/blog-2.png" alt="Heartbeat Diagram" style="max-width: 100%; border-radius: 12px;" />
  <figcaption><br />출처: RFC 9293 - Transmission Control Protocol(TCP)</figcaption>
</figure>

<ul>
  <li>Source Port(16bit): 출발지 포트</li>
  <li>Destination Port(16bit): 목적지 포트</li>
  <li>Sequence Number(32bit): 시퀀스 번호</li>
  <li>Acknowledgement Number(32bit): 확인 응답 번호</li>
  <li>Data Offset(4bit): 데이터 오프셋</li>
  <li>Reserved(4bit): 향후 사용을 위해 예약된 Flags Bit 집합</li>
  <li>Flags(8bit): Control Bits</li>
  <li>Window(16bit): 윈도우 사이즈로 Unsigned 형</li>
  <li>Checksum(16bit): 체크섬</li>
  <li>Urgent Pointer(16bit): 긴급 포인터</li>
  <li>Options: Opt</li>
  <li>Data: Payload
<br /><br /></li>
</ul>

<hr />]]></content><author><name>SY Kang</name></author><category term="Network" /><category term="Network" /><summary type="html"><![CDATA[TCP Overview   네트워크 전송 시 외부 요인의 영향을 많이 받는 L1(물리 계층), L2(데이터링크 계층)에서 데이터 손실 및 오류가 자주 일어난다. 이러한 문제점을 해결하기 위해 제안된 것이 TCP(Transport Control Protocol)이다. TCP의 가장 중요한 기능은 어플리케이션에 신뢰성 있는 데이터를 전송하는 것이다.   이는 시퀀스 넘버 이용한 손실 감지, 시퀀스 넘버와 Ack 넘버를 통한 손실 탐지, Checksum을 이용한 오류 탐지, 재전송 요청을 통한 오류 수정, 윈도우 사이즈 값을 이용한 흐름 제어를 통해 보장한다. 또한 통신선의 효율을 위해 너무 큰 Segment는 Segmentation 후 전송되어 수신 측에서 시퀀스 넘버를 이용하여 Reassemble(재조립)을 한다. 또한 TCP에서 정의한 포트를 통해 여러 어플리케이션에서 하나의 IP를 사용하여 서로 다른 시스템과 통신을 할 수 있게 한다. 이것이 TCP의 가장 핵심적인 기능이다.   이러한 기능은 TCP Payload 앞에 붙여지는 헤더에 의해 제어된다. 따라서 본 포스트에서는 TCP 헤더에 대해 조금 살펴보겠다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog-2.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Heartbleed Vulnerability</title><link href="http://0.0.0.0:4000/vulnerability/protocol/history/2025/05/23/OpenSSL-Heartbleed-Vulnerability/" rel="alternate" type="text/html" title="Heartbleed Vulnerability" /><published>2025-05-23T00:00:00+00:00</published><updated>2025-05-23T00:00:00+00:00</updated><id>http://0.0.0.0:4000/vulnerability/protocol/history/2025/05/23/OpenSSL-Heartbleed-Vulnerability</id><content type="html" xml:base="http://0.0.0.0:4000/vulnerability/protocol/history/2025/05/23/OpenSSL-Heartbleed-Vulnerability/"><![CDATA[<h2 id="들어가기-전에">들어가기 전에</h2>
<p>  현대의 컴퓨터 환경에서 워너크라이 랜섬웨어, Windows Spooler 취약점 공격 등 다양한 보안 사고가 끊임없이 발생하고 있으며 그로 인한 피해는 매우 심각한 수준이다. 특히 이번 포스트에서 다룰 Heartbleed 공격은 10여년 전 발견됐지만 공격 대상이 된 시스템에서 민감한 정보를 관리자가 인지하지 못하는 사이에 외부로 유출시킬 수 있다는 점에서 치명적인 위협이라고 생각한다.<br /><br />
  Heartbleed 공격은 TLS Record 프로토콜의 확장 기능인 Heartbeat의 구현 오류에서 비롯된 보안 취약점을 이용한 공격으로 주로 서버의 메모리를 비정상적을 읽어오는 방식으로 이루어졌다. 이로 인해 비밀키, 사용자 인증 정보, 민감한 데이터, 보안 메커니즘 우회에 사용될 수 있는 내부 정보 등과 같은 중요한 데이터가 유출될 수 있었다.<br /><br />
  본 포스트에서는 이러한 Heartbleed 공격의 심각성을 인식하고, 이를 보다 명확히 이해하기 위해 Heartbeat 프로토콜의 도입 배경과 요구사항을 기술한 후, 취약점이 존재하는 코드를 분석하여 구체적인 공격 메커니즘에 대한 이해를 돕고자한다. 또한 실제 피해 사례를 소개하고, 대응 방안에 대해 여러 자료들을 바탕으로 다양한 관점에서 서술하고자 한다.
<br /><br /></p>

<hr />

<h2 id="1-heartbeat-메시지의-도입-배경">1. HEARTBEAT 메시지의 도입 배경</h2>
<p>  Heartbeat 메시지는 SSL(Secure Sockets Layer) 위에서 동작하는 확장 기능으로 연결 상태를 주기적으로 확인하기 위해 도입되었다.<br />
<br />  TLS는 TCP 기반 SSL이 적용된 프로토콜로, TCP는 지속적인 데이터 전송 없이 연결 상태(Connection Alive)를 유지할 수 있는 기능이 반드시 제공되지 않는 상황에서 제안되었다. DTLS는 UDP 기반 SSL이 적용된 프로토콜로, 데이터그램(Datagram)을 안전하게 전송하기 위해 설계되었다. 그러나 TLS와 달리 세션 관리 기능이 없어, 상대방이 통신 가능한 상태인지 확인하는 유일한 방법은 재협상(renegotiation) 뿐이었다. 이러한 재협상은 Handshake 과정을 다시 수행해야 하므로, 특히 단방향 트래픽을 사용하는 애플리케이션에서는 비효율적인 측면이 있다.<br />
<br />  이러한 한계를 해결하기 위해 2010년 6월 18일 <a href="https://datatracker.ietf.org/doc/html/draft-seggelmann-tls-dtls-heartbeat-00">IETF의 초안 문서</a>에서 Heartbeat 메시지 개념이 제안되었다.
이후 해당 개념은 <a href="https://datatracker.ietf.org/doc/html/rfc6520">RFC 6520</a> (Transport Layer Security(TLS) and Datagram Transport Layer Security(DTLS) Heartbeat Extension)으로 발전했으며, OpenSSL 측에서는 2012년 03월 14일에 공개된 <a href="https://github.com/openssl/openssl/releases/tag/OpenSSL_1_0_1">OpenSSL 1.0.1</a> 버전에서 처음으로 도입하였다.
<br /><br /></p>

<hr />

<h2 id="2-heartbeat-protocol-주요-요구사항">2. HEARTBEAT PROTOCOL 주요 요구사항</h2>
<p><img src="/assets/img/blog/heartbeat-diagram0.png" alt="Heartbeat Diagram" style="max-width: 100%; border-radius: 12px;" />
<br /></p>
<ul>
  <li>Heartbeat Protocol은 HeartbeatRequest, HeartbeatResponse 두 가지 메시지 타입으로 구성된다.</li>
  <li>HeartbeatRequest 메시지는 연결이 유지되고 있는 동안 언제든지 도착할 수 있다.</li>
  <li>HeartbeatRequest 메시지를 수신하면, 상응하는 HeartbeatResponse 메시지로 응답해야 한다.</li>
  <li>HeartbeatRequest 수신 측은 동일한 페이로드를 포함하는 HeartbeatResponse 메시지를 반드시 전송해야 한다.</li>
  <li>수신된 Heartbeat 메시지의 페이로드 길이 필드 값이 너무 큰 경우 조용히 폐기되어야 한다.</li>
  <li>수신한 HeartbeatResponse 메시지가 HeartbeatRequest의 페이로드를 포함하지 않은 경우 조용히 폐기되어야 한다.</li>
  <li>Heartbeat Protocol 메시지는 Heartbeat 메시지 타입 필드, unsigned int16(부호 없는 16bit 정수)를 범위로 하는 페이로드 길이 필드, 페이로드 필드, 패딩 필드로 구성된다.<br />
<br /><br /></li>
</ul>

<hr />

<h2 id="3-정상적인-heartbeat-message-동작-과정">3. 정상적인 Heartbeat Message 동작 과정</h2>
<p><img src="/assets/img/blog/heartbeat-diagram1.png" alt="Heartbeat Diagram" style="max-width: 100%; border-radius: 12px;" /><br />
<br />
① 클라이언트와 서버가 암호화 통신을 위해 SSL/TLS Handshake를 한다.<br />
② 일정 주기로 클라이언트에서 서버로 HeartbeatRequest 메시지를 송신한다.<br />
③ 서버에서 HeartbeatRequest 메시지를 수신 후 버퍼에 저장한다.<br />
④ 버퍼에 저장한 HeartbeatRequest 정보를 바탕으로 HeartbeatResponse 메시지를 구성하여 클라이언트에 송신한다.<br />
⑤ 클라이언트에서 HeartbeatResponse 메시지를 수신하여 연결 상태를 확인한다.<br />
⑥ 이 과정을 반복한다.
<br /><br /></p>

<hr />

<h2 id="4-취약점-코드">4. 취약점 코드</h2>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">int</span>
	<span class="n">tls1_process_heartbeat</span><span class="p">(</span><span class="no">SSL</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
		<span class="p">{</span>
		<span class="n">unsigned</span> <span class="n">char</span> <span class="o">*</span><span class="nb">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">*</span><span class="n">pl</span><span class="p">;</span>
		<span class="n">unsigned</span> <span class="n">short</span> <span class="n">hbtype</span><span class="p">;</span>
		<span class="n">unsigned</span> <span class="n">int</span> <span class="n">payload</span><span class="p">;</span>
		<span class="n">unsigned</span> <span class="n">int</span> <span class="n">padding</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span> 

		<span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="nb">p</span><span class="o">++</span><span class="p">;</span>
		<span class="n">n2s</span><span class="p">(</span><span class="nb">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
		<span class="n">pl</span> <span class="o">=</span> <span class="nb">p</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="k">if</span> <span class="p">(</span><span class="n">hbtype</span> <span class="o">==</span> <span class="no">TLS1_HB_REQUEST</span><span class="p">)</span>
			<span class="p">{</span>
			<span class="n">unsigned</span> <span class="n">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="o">*</span><span class="n">bp</span><span class="p">;</span>
			<span class="n">int</span> <span class="n">r</span><span class="p">;</span>

			<span class="n">buffer</span> <span class="o">=</span> <span class="no">OPENSSL_malloc</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">);</span>
			<span class="n">bp</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">;</span>
			

			<span class="o">*</span><span class="n">bp</span><span class="o">++</span> <span class="o">=</span> <span class="no">TLS1_HB_RESPONSE</span><span class="p">;</span>
			<span class="n">s2n</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span>
			<span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
			<span class="n">bp</span> <span class="o">+=</span> <span class="n">payload</span><span class="p">;</span>

			<span class="n">r</span> <span class="o">=</span> <span class="n">ssl3_write_bytes</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="no">TLS1_RT_HEARTBEAT</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">);</span>

		<span class="o">...</span> <span class="err">이하</span> <span class="err">생략</span>

	<span class="p">}</span>
</code></pre></div></div>
<div style="text-align: center; margin-top: -10px; padding-bottom: 1.2em;">
출처: OpenSSL GitHub - OpenSSL 1.0.1 release
</div>

<hr />

<h6 id="참조">참조</h6>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span>	<span class="n">define</span> <span class="n">n2s</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">s</span><span class="p">)</span>  <span class="p">((</span><span class="n">s</span><span class="o">=</span><span class="p">(((</span><span class="n">unsigned</span> <span class="n">int</span><span class="p">)(</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span><span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="p">\</span>
			<span class="p">(((</span><span class="n">unsigned</span> <span class="n">int</span><span class="p">)(</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]))))),</span> <span class="n">c</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span>

<span class="mi">2</span>	<span class="n">define</span> <span class="n">s2n</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>  <span class="p">((</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">unsigned</span> <span class="n">char</span><span class="p">)(((</span><span class="n">s</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xff</span><span class="p">),</span> <span class="p">\</span>
			<span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">unsigned</span> <span class="n">char</span><span class="p">)(((</span><span class="n">s</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xff</span><span class="p">)),</span> <span class="n">c</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="5-취약점을-이용한-공격-과정">5. 취약점을 이용한 공격 과정</h2>
<p><img src="/assets/img/blog/heartbeat-diagram2.png" alt="Heartbeat Diagram" style="max-width: 100%; border-radius: 12px;" /><br />
<br />
① 클라이언트와 서버가 암호화 통신을 위해 SSL/TLS Handshake를 한다.<br />
② 클라이언트(공격자)는 HeartbeatRequest 메시지의 Payload Length 값을 조작하고 Payload 내용을 최대한 짧은 데이터로 조작하여 송신한다.<br />
③ 서버에서 어떠한 인증 없이 HeartbeatRequest 메시지를 수신 후 버퍼에 저장한다.<br />
④ 버퍼에 저장된 payload부터 Payload Length 값을 길이로 한 새로운 payload를 HeartbeatResponse 메시지에 복사하여 클라이언트(공격자)에 송신한다.<br />
⑤ 클라이언트에서 수신한 메시지에서 원 페이로드를 제외한 나머지 데이터를 조합하여 유의미한 정보를 추출한다.<br />
⑥ 이 과정을 수차례 반복한다.
<br /><br /></p>

<hr />

<h2 id="6-피해사례">6. 피해사례</h2>
<ul>
  <li>캐나다 국세청(CRA): 900명의 사회보장번호 유출, 캐나다 국세청 5일간 온라인 서비스 중지, 사회보장 번호 재발급</li>
  <li>미국: Community Health Systems(미국의 영리병원체인 중 2번째 규모)의 450만 명의 환자기록 유출 당함</li>
  <li>영국 Mumsnet: 150만 명 회원정보 유출 당함</li>
  <li>OKCupid: 사용자의 로그인 정보와 메시지 내용(채팅 내역, 성적 취향 등) 노출<br />
<br />
  위에서 기술한 사례들처럼, 해당 취약점은 광범위하게 영향을 미쳤다. 또한 취약점이 공개되기 전까지는 Heartbeat 메시지를 IDS/IPS에서 로그에 저장하는 것이 기술적으로 가능했음에도 불구하고, 대부분의 기관은 그 필요성을 느끼지 못해 기록하지 않았다. 이로 인해 특정 기관의 온라인 서비스가 취약한 지는 알 수 있었지만 공격이 실제로 발생했는지, 발생했다면 어느 범위까지 피해가 확산되었는지를 정확히 파악할 수 없게되었다. 
<br /><br /></li>
</ul>

<hr />

<h2 id="7-대응-방안">7. 대응 방안</h2>

<p><strong>7.1  취약점 발견 전 예방조치</strong><br />
<em>개발 측 예방조치</em><br />
:: 시큐어코딩 준수<br />
:: 프로토콜 표준문서와 구현코드 비교검증<br />
:: 퍼징(Fuzzing) 테스트</p>

<p><em>제도적 대응방안</em><br />
:: 소스코드 외부 감사<br />
:: 버그바운티 활성화<br />
<br /><br />
<strong>7.2 ZERO-DAY ~ ONE-DAY 대응방안</strong><br />
<em>취약점 발견자 대응방안</em><br />
:: Zero-Day 공격 방지 및 완화를 위해 해당 취약점을 유관기관에만 알려 보안 패치를 준비할 시간 확보<br />
:: PoC(Proof of Concept) 공유 보류</p>

<p><em>Server 측 대응방안</em><br />
:: IDS/IPS를 통한 이상 트래픽 탐지 및 차단(Heartbeat Request 메시지 중 Payload Length 값이 비정상적으로 크거나 payload 길이와 같지 않은 트래픽 분석)<br />
:: 서버에서의 Heartbeat 기능 비활성화(-DOPENSSL_NO_HEARTBEATS 옵션을 켜고 OpenSSL을 컴파일 후 적용)<br />
:: 소스코드 변경 후 적용(Payload Length와 payload 길이 비교 검증 코드 추가)<br />
:: 서버 인증서 재발급(서버측 SSL Secret Key 유출 가능성 존재)<br />
:: PFS(Perfect Forward Secrecy)를 사용하여 각 세션마다 임시 키 사용</p>

<p><em>Client 측 대응방안</em><br />
:: 비밀번호 재설정(취약한 포탈, 유사한 비밀번호 쓰는 포탈)<br />
:: MFA(Multi Factor Authentication) 사용<br />
<br /><br />
<strong>7.3 ONE-DAY 이후 대응방안</strong><br />
<em>보안 패치 적용 가능한 환경</em><br />
:: OpenSSL 보안 패치 적용 버전으로 업그레이드</p>

<p><em>보안 패치 적용이 어려운 환경</em><br />
:: IDS/IPS 룰 추가 및 모니터링<br />
:: 샌드박스 환경에서 테스트 후 보안 패치 적용<br />
<br /><br /></p>

<hr />

<h2 id="8-결론">8. 결론</h2>
<p>  OpenSSL Heartbeat 취약점 사태는 개발 단계의 실수가 어떻게 전 세계적인 보안 이슈로 연결될 수 있는지를 보여주는 대표적인 사례다.
<br /><br />
  해당 취약점은 Heartbeat 메시지를 처리하는 과정에서 Payload Length 값이 실제 Payload 보다 클 경우에도 그대로 메모리를 복사하여 전달함으로써 발생했다. 이는 클라이언트 입력값 미검증, 경계선 검사, 그리고 프로토콜 요구 사항을 구현하지 않았다.
<br /><br />
  이러한 구현상의 결함은 캐나다, 미국, 영국 등 여러 국가의 공공기관과 기업에서 사회보장번호, 의료정보, 계정, 세션키 등의 민감한 정보 유출로 이어졌다. 또한, 당시 대부분의 IDS/IPS 시스템은 Heartbeat 메시지를 정상적인 TLS 트래픽으로 처리해 로그를 기록하지 않았기 때문에, 공격의 발생 여부나 피해 범위를 정확히 파악하는 것조차 불가능한 상황이 되게 하였다.
<br /><br />
  위에서 기술한 3가지 원인은 단 몇 줄의 코드로 해결 가능한 부분이다. 그럼에도 불구하고 이러한 사태가 발생했다는 것은 보안이 단순한 기능의 부가 요소가 아니라 설계와 개발 단계에서부터 내재화되어야 할 필수 요소임을 시사한다.</p>

<hr />]]></content><author><name>SY Kang</name></author><category term="[&quot;Vulnerability&quot;, &quot;Protocol&quot;, &quot;History&quot;]" /><category term="Vulnerability" /><category term="Protocol" /><summary type="html"><![CDATA[들어가기 전에   현대의 컴퓨터 환경에서 워너크라이 랜섬웨어, Windows Spooler 취약점 공격 등 다양한 보안 사고가 끊임없이 발생하고 있으며 그로 인한 피해는 매우 심각한 수준이다. 특히 이번 포스트에서 다룰 Heartbleed 공격은 10여년 전 발견됐지만 공격 대상이 된 시스템에서 민감한 정보를 관리자가 인지하지 못하는 사이에 외부로 유출시킬 수 있다는 점에서 치명적인 위협이라고 생각한다.   Heartbleed 공격은 TLS Record 프로토콜의 확장 기능인 Heartbeat의 구현 오류에서 비롯된 보안 취약점을 이용한 공격으로 주로 서버의 메모리를 비정상적을 읽어오는 방식으로 이루어졌다. 이로 인해 비밀키, 사용자 인증 정보, 민감한 데이터, 보안 메커니즘 우회에 사용될 수 있는 내부 정보 등과 같은 중요한 데이터가 유출될 수 있었다.   본 포스트에서는 이러한 Heartbleed 공격의 심각성을 인식하고, 이를 보다 명확히 이해하기 위해 Heartbeat 프로토콜의 도입 배경과 요구사항을 기술한 후, 취약점이 존재하는 코드를 분석하여 구체적인 공격 메커니즘에 대한 이해를 돕고자한다. 또한 실제 피해 사례를 소개하고, 대응 방안에 대해 여러 자료들을 바탕으로 다양한 관점에서 서술하고자 한다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog-4-scaled-2.png" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog-4-scaled-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">By spite about do of do allow</title><link href="http://0.0.0.0:4000/music/2020/08/05/by-spite-about/" rel="alternate" type="text/html" title="By spite about do of do allow" /><published>2020-08-05T00:00:00+00:00</published><updated>2020-08-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/music/2020/08/05/by-spite-about</id><content type="html" xml:base="http://0.0.0.0:4000/music/2020/08/05/by-spite-about/"><![CDATA[<p>So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.</p>

<p>Forfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.</p>

<blockquote>
  <p>Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque suscipit.</p>
</blockquote>

<p>Tiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing <a href="#">link</a> sufficient everything men him admiration unpleasing .</p>

<ul>
  <li>Greatest properly off ham exercise all.</li>
  <li>Unsatiable invitation its possession nor off.</li>
  <li>All difficulty estimating unreserved increasing the solicitude.</li>
</ul>

<p>Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Ryan'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Ryan' to STDOUT.</span>
</code></pre></div></div>]]></content><author><name>Ryan Adlard</name></author><category term="Music" /><category term="rock" /><summary type="html"><![CDATA[So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog9.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog9.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Two Before Arrow Not Relied</title><link href="http://0.0.0.0:4000/design/2020/07/20/two-before-arrow/" rel="alternate" type="text/html" title="Two Before Arrow Not Relied" /><published>2020-07-20T00:00:00+00:00</published><updated>2020-07-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/design/2020/07/20/two-before-arrow</id><content type="html" xml:base="http://0.0.0.0:4000/design/2020/07/20/two-before-arrow/"><![CDATA[<p>So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.</p>

<p>Forfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.</p>

<blockquote>
  <p>Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque suscipit.</p>
</blockquote>

<p>Tiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing <a href="#">link</a> sufficient everything men him admiration unpleasing .</p>

<ul>
  <li>Greatest properly off ham exercise all.</li>
  <li>Unsatiable invitation its possession nor off.</li>
  <li>All difficulty estimating unreserved increasing the solicitude.</li>
</ul>

<p>Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Ryan'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Ryan' to STDOUT.</span>
</code></pre></div></div>]]></content><author><name>Ryan Adlard</name></author><category term="Design" /><category term="code" /><summary type="html"><![CDATA[So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog8.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog8.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Design in Mobile Application</title><link href="http://0.0.0.0:4000/mobile/2020/07/05/design-in-mobile/" rel="alternate" type="text/html" title="Design in Mobile Application" /><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/mobile/2020/07/05/design-in-mobile</id><content type="html" xml:base="http://0.0.0.0:4000/mobile/2020/07/05/design-in-mobile/"><![CDATA[<p>So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.</p>

<p>Forfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.</p>

<blockquote>
  <p>Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque suscipit.</p>
</blockquote>

<p>Tiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing <a href="#">link</a> sufficient everything men him admiration unpleasing .</p>

<ul>
  <li>Greatest properly off ham exercise all.</li>
  <li>Unsatiable invitation its possession nor off.</li>
  <li>All difficulty estimating unreserved increasing the solicitude.</li>
</ul>

<p>Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Ryan'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Ryan' to STDOUT.</span>
</code></pre></div></div>]]></content><author><name>Ryan Adlard</name></author><category term="Mobile" /><category term="app" /><category term="mobile" /><summary type="html"><![CDATA[So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog-2.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">By spite about what to do</title><link href="http://0.0.0.0:4000/design/2020/06/15/by-spite-what/" rel="alternate" type="text/html" title="By spite about what to do" /><published>2020-06-15T00:00:00+00:00</published><updated>2020-06-15T00:00:00+00:00</updated><id>http://0.0.0.0:4000/design/2020/06/15/by-spite-what</id><content type="html" xml:base="http://0.0.0.0:4000/design/2020/06/15/by-spite-what/"><![CDATA[<p>So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.</p>

<p>Forfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.</p>

<blockquote>
  <p>For me, the design — it is the quality of life. Good design has little to do with trends. Tired of listening to how he try to give the status of a frivolous fashion phenomenon. In my opinion, the designer should strive to do more than separate things.</p>
</blockquote>

<p>Tiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing <a href="#">link</a> sufficient everything men him admiration unpleasing .</p>

<ul>
  <li>Greatest properly off ham exercise all.</li>
  <li>Unsatiable invitation its possession nor off.</li>
  <li>All difficulty estimating unreserved increasing the solicitude.</li>
</ul>

<p>Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Ryan'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Ryan' to STDOUT.</span>
</code></pre></div></div>]]></content><author><name>Ryan Adlard</name></author><category term="Design" /><category term="Jekyll" /><summary type="html"><![CDATA[So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog6.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog6.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://0.0.0.0:4000/video/music/2020/01/08/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-01-08T00:00:00+00:00</published><updated>2020-01-08T00:00:00+00:00</updated><id>http://0.0.0.0:4000/video/music/2020/01/08/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/video/music/2020/01/08/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in <a href="https://jekyllrb.com/docs/usage/">many different ways</a>, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code><sup id="fnref:posts" role="doc-noteref"><a href="#fn:posts" class="footnote" rel="footnote">1</a></sup> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<p>Check out the <a href="http://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:posts" role="doc-endnote">
      <p>Footnote test. <a href="#fnref:posts" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sarah Rose</name></author><category term="[&quot;Video&quot;, &quot;Music&quot;]" /><category term="Jekyll" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/blog/blog-4-scaled-1.jpg" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/blog/blog-4-scaled-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>